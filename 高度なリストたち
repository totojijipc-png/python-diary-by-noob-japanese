#こんにちは。今回は、高度なリスト操作について勉強していきます
#リスト内包表記や、集合、ダブルなんかを学びます。
# これ終わったら、非同期処理やりたいので、頑張ります。

#リスト内包表記
#リスト内包表記とは、リストを生成するための簡潔な方法です。
# めっちゃ簡単で便利すぎるので、マジやばいです
list = [i for i in range(10)]
print(list)
#上記のコードは、0から9まで作ります。
list = [0,1,2,3,4,5,6,7,8,9]
print(list)
#これと同じ動きをします
#今回は0から9ですが、この数がどんどん増えていくと、恩恵を感じそうですね
# また、条件を追加することもできます。
even = [i for i in range(10) if i % 2 == 0]
print(even)
#これだけで、0から9までの偶数を含むリストが作れます
# ちなみに、こんなこともできます
list = [(a,b) for a in range(3) for b in range(3)]
print(list)
#何でもできそうですね

#集合
#集合は、重複しない要素の集まりを表すデータ型です。
#集合は{}で囲むだけでできます
set = {1,2,3,4,5,5,5,5,5}
print(set)
#5は重複しているので、1回しか表示されません
# 使い道があまり思いつかないですがね、、、

# デック
# デックは、両端から要素を追加・削除できるデータ構造です。
# インポートして使用します。
from collections import deque
# デックを作成します
double = deque()
#要素を追加します
double.append(1)
double.append(2)
double.appendleft(0)
print(double)
#要素を削除します
double.pop()
double.popleft()
print(double)
# 例えば、幅優先探索や深さ優先探索などのアルゴリズムで使用されます。
# まあ、あんまり使わないかな、、、
# やっぱり、リスト内包表記が一番便利ですね
# さらに活用として、以下のようなものもあります

#any allを使ったリスト内包表記。anyは一つでもTrueならTrue、allは全部TrueならTrue
list = any([x > 0 for x in [-810,1]])
print(list)
list = all([x > 0 for x in [1,-1]])
print(list)

#anyのほうは1が条件を満たしているから、True、allのほうは-1が条件を満たしていないから、False

#二重のリストをただのリストにする方法もあります。
list = [[1,2,3],[-1,-2,-3],[11,21,11]]
flat = [f for x in list for f in x]
print(flat)
#これで、二重のリストをただのリストにできます。
#これまた面白いのが、for x in　のxを関数として使えるんですよね
w =["yaju","ikisugi"]
big = [x.upper() for x in w]
print(big)
#こんな感じで、関数を使うこともできます。

#zipやenumerateも便利です
num = [a + b for a,b in zip([1,2,3],[4,5,6])]
print(num)

ranking = [f"{i+1}位: {name}" for i, name in enumerate(["yaju","ikisugi","ikuiku"])]
#なんか、enumerateって()内で入れる順番、name,iなのに、i,nameで取り出すんですよね
print(ranking)


#ここまで学んだあとに気付いたんですが、ジェネレーターって書き方があって、そっちのほうがメモリ使わないらしいです
# しかもリストの書き方を[]から()に変えるだけでできるらしいです
# でも、これをすると、リストじゃなくなるから途中の数字とかがとりだせないんですよね
# 逆に、取り出す必要がないなら、こっち使えばいいですね。
# とくに、any allは、リストじゃなくてもいいので、こっちのほうがいいですね
a = any(x ** x > 0 for x in range(1000000000000000000000000000000) if x % 2 == 0)
print(a)

#anyとかallは結論が出るとすぐに終わるので、こんなあほみたいな数でも、すぐに終わります。
# たとえ、これが、難しい処理だったとしても、リストとこの書き方だと雲泥の差があるようなので、練習しときました


#これ極めたら、もっときれいにコード書けそう
#次回は、初心者殺しの非同期処理をやります
# これができたら、小さなアプリを一つぐらい作ってみます。
# では、また次回


# 余談なのですが、今回こんなにコメントが多いのは、chatGPTにアシストしてもらったからです
# 後で見直すとに便利なので、たくさん入れてみました。
# コードなんかも補完してもらえますが、実力につながらないかと思って、ほとんど手打ちで書きました
# 今はこんな機能が使えるんですから、開発速度もめちゃくちゃ早いのでは？とおもってしまいます
# AIサブスく入っていないんですが、これなら入ってもいいかなーなんて思っています
# ここまで読んでくださりありがとうございました
