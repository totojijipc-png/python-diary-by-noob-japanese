#例外処理について勉強していく。エラーハンドリングは、処理に何かしらのエラーが出た際に、どんなエラーなのかを検知できたり、ほかのコードに影響が出ないようにできるらしい

# ValueError: 値の型が不正
# ZeroDivisionError: 0で割り算した
# TypeError: 型が違うとき
# IndexError: インデックスが範囲外

# これらを使ったり、自作できたりもするらしい。早速実験
try:
    error = int(input("数字だけ入力してね"))
except ValueError as e:
    print(f"エラーが発生しました:{e}")
else:
    print("正しく動作しました1")
finally:
    print("try終了")
# elseが問題なかった場合、finallyが正誤関係なく動くらしい。
# これっていつ使うかいまいちイメージがわかなかったけど、結構よさそうな使い道を思いついた↓
f = input("ファイル名を入力してください")
try:
    with open(f,"r") as fi:
        content = fi.read()
        print(content)
except FileNotFoundError:
    print("ファイルが見つかりませんでした。作成します")
    with open(f,"w") as f2:
        f2.write()
finally:
    print("操作が終了しました")
#なんかtryでやることじゃない気もするけど一応使い道があるのかも？
# ちなみに手こずったのは、何として開くかと、import osからexistするとき、正誤で帰ることがだるかったです。まあ、検証しても使う機会ないでしょうし、大丈夫でしょ(;^_^A



#なんか使い道よくわからなかったけど、、、べんきょうになった！！
# 次はよく初心者の壁といわれているオブジェクト指向に挑戦していきます。
# このまま書いてもいいでしょうが、次の章は難しそうなので、ここで切ってみようと思います。＾＾
