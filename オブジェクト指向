# オブジェクト指向！！どうやら、値とかを、オブジェクト（いろいろ数値いれられるもの）に保存したりなど、動作をまとめて読みやすく、変更しやすくするのが
# 目的なようです。
class Person:
    def __init__(self, name, age, job):
        self.name = name
        self.age = age
        self.job = job

p = Person("お尻探偵",21,"探偵")
print(p.name,p.age,p.job)

k = Person("キラ",18,"殺し屋")
print(k.name,k.age,k.job)
#これが基本のようです。initで初期化をする際に、（）の引数からself.--- = ---みたいな感じで、selfをつけることで、それを
# オブジェクトとして使えるようになります。よく使う情報なんかはきれいにまとめられてめっちゃ便利そう。

class like:
    def __init__(self,food,sports,subject):
        self.food = food
        self.sports = sports
        self.subject = subject
    
    def hello(self):
        print(f"こんにちは！私の好きな食べものは{self.food}で、好きなスポーツは{self.sports}です！あと、好きな教科は{self.subject}です。")
    
    def change(self, f):
        self.food = f
        print(f"好きな食べ物は{f}になりました！")

p = like("寿司","テニス","地理")
p.hello()
p.change("焼肉")

# クラスの中に関数を作ることで、そのクラス内で動作させることができるみたいです。便利そう
# なんかprint(p)をすると、読みにくいことがあるそう。まだ、pのなかにオブジェクトがあるので、やってみる
#print(p)
# <__main__.like object at --------------->みたいに表示されてしまいました。これを解決する方法があるらしいので、やってみる
class Person:
    def __init__(self, name, age, job):
        self.name = name
        self.age = age
        self.job = job

    def __str__(self):
        return f"{self.name} ({self.age} 歳, {self.job})"


p = Person("お尻探偵", 21, "探偵")
print(p)
#どうやら、strを使うことで、printで返す構造を決めれるらしい。使うかどうかはわからないけど、知っていて得しそう
# リストでまとめられるとよりいいらしい
class student:
    def __init__(self, name, height, score, ranking):
        self.name = name
        self.height = height
        self.score = score
        self.ranking = ranking
    
    def hello(self):
        print(f"私の名前は{self.name}")

students =[
    student("野獣先輩", 170, -1919, 1145141919),
    student("けつげじょりー", 12, 84, 23),
    student("かーびー", 10, 0, 252),
    student("はなげじょりー",13, 85, 21)
]
for s in students:
    print(s.name)

# これは使えそう
# 継承にも挑戦ちょうどいいので、studentを継承してみよう
class shoolclass(student):
    shool = "いい世こいよ高校"
    def __init__(self, name, number, ikisugido):  #ちなみに継承した状態でinitをタブで出したらsuperまで出してくれた
        super().__init__(name)
        self.number = number
        self.ikisugido = ikisugido
    
    def munenikakete(self):
        print(f"{self.name}は胸にかけて")

p = shoolclass()
#上記のコードは間違っています。親は子も必ず持つ条件で書かないと継承しずらいです。なので、次からは気をつけよう
# ですが、結構便利そうです。継承することで、書き直さなくて済むのでいいですね。
# もっといろいろな機能があるようなのですが、基本的な機能は抑えられたので、とりあえず、終わりにしましょう。
# 必要になったらまた勉強しようと思います。
# 次回は高度なデータ構造についてです。リスト内包型みたいなやつとかをやります。
# ここまでやって思ったけれど、オブジェクト指向が難しいって言われている理由は、何のために使うか、また、どんなことができるかを最初に解説していないからだと思います
# chatgpt君は優秀でわかりやすく解説してもらいました。間違っている部分とかもレビューしてもらって気づくことができました。
#ある程度の技術が身に付いたら、簡単なアプリなんかも作ってみようと考えています。
