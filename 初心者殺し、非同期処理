#こんちゃ。
# 非同期処理をやります。
# 非同期処理は、普通は、上から下に、順番に処理されるのを、
# 同時に、複数の処理を行うことができるようするもののようです。
# 例えば、114514 ** 8101919 みたいなくそおもい計算をするとして（実際は思い計算には適さないみたいだけど）、上から下に実行されるので、結果が出るまで待たないといけないところを、
# その処理を、専用の処理部屋みたいなところでやることで、他の処理を止めずに、同時に進めることができるようにするものです。
# APIっていう、webとかから情報を取得するときとか、時間がかかる作業で使えばいいらしいです。
# 実例↓
import asyncio

async def hello(name,delay):
    print(f"おい！！{name},{delay}秒待て！！")
    await asyncio.sleep(delay)
    print(f"{name}は終わったよ")

async def main():
    await asyncio.gather(
        hello("A",3),
        hello("B",1),
        hello("C",2)
    )
    print("全員終わったよ")

asyncio.run(main())

# ってな感じ。実行はそれぞれ隔離されているから、ちゃんとバラバラの時間をそれぞれ図ってくれる。
# async で非同期処理の枠をつくって、awaitでその処理が終わるまで、その処理部屋は待つよ、って感じ。
# だから、print("全員終わったよ")みたいなのは、awaitのスコープの外に出す。
# asynico.gatherで、一斉にスタートさせる。
# asyncio.runで、非同期処理を実行する。
# sleepは秒数待てます。
import time

async def wait_work(name, time):
    await asyncio.sleep(time)

async def main2():
    print("main2処理開始")
    start_time = time.time()
    t = asyncio.create_task(wait_work("A",3))
    while not t.done():
        now = time.time() - start_time
        print(f"経過時間：{now:.1f}秒")
        await asyncio.sleep(0.5)

    print("main2終了")
asyncio.run(main2())

# 苦戦したのが、t.done()ですね。これで終わったか判定できます。その肝心のtについては、asyncio.create_taskで、awaitとは違って、非同期処理の中でも非同期処理できます
# だから、tが終わるまで、whileがループして、秒数を数えることができるわけですねー。いやー難しい。
# 一つ、躓きポイントは、それぞれの非同期処理の中で関数を作る（例えば、num=810）それを、非同期処理の外ではつかえないことですね。

# as_completed()っていうのは、()内の処理が終わった順に、結果を返してくれるものです。そういったものもあるんですねー。


# さて、今回は非同期処理をやりました。思っていたより簡単だったかも？自分が浅いだけだと思うけど笑
# どうやら、調べてみたところ、ここまで勉強した内容があれば、簡単なアプリぐらいは作れるそう。
# 私の目標はpythonをうまく使う（マスターする）ことで、プログラミング言語についてしり、cppとかC#なんかでアプリ開発をすることなんです。
# ちなみに、番外編の音ゲーもその一環です。まともなもの作れるように頑張ります

# 次回は、全然知らなかったフレームワークについて調べていきます！importでよく見るやつですね。

# 次回も頑張ります！！



# 今回も余談なのですが、ここまでのpython学習は3課程度しかしていないんですよね、、、結構穴がありそうですが、初心者に使いやすいというのは本当だったようです。
# ただ、私のやりたいことは調べた感じ、pythonではできないことが多いようです。なので、pythonを勉強した後に、C#とかcppとかを勉強する予定です。
# ですが、pythonでやりたいことがあるのも事実！！まずは一転集中でpythonをマスターします！！
# それでは、また次回！！
